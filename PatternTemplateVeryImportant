#Source: https://medium.com/@tudorache.a.bogdan/day-2-strings-the-bear-and-steady-genes-27a85819712a
def sliding_window(s, window_size):
    # Initialize variables
    window_start = 0
    window_end = 0
    current_sum = 0
    
    # Loop through the string
    while window_end < len(s):
        # Expand the window to the right
        current_sum += s[window_end]
        window_end += 1
        
        # Shrink the window from the left
        while current_sum > target:
            current_sum -= s[window_start]
            window_start += 1
        
        # Check if we have found a valid subarray
        if current_sum == target:
            return [window_start, window_end - 1]
    
    # Return None if no valid subarray found
    return None
--------------------------------------------------------------------------------------------------------------
//C++ Window Sliding Template for substring
// source:https://leetcode.com/problems/minimum-window-substring/solutions/26808/here-is-a-10-line-template-that-can-solve-most-substring-problems/

For most substring problem, we are given a string and need to find a substring of it which satisfy some restrictions.
A general way is to use a hashmap assisted with two pointers. The template is given below.

1. Use two pointers: begin and end to represent a window.
2. Move end to find a valid window.
3. When a valid window is found, move begin to find a smaller window.

int findSubstring(string s){
        vector<int> map(128,0);
        int counter; // check whether the substring is valid
        int begin=0, end=0; //two pointers, one point to tail and one  head
        int d; //the length of substring

        for() { /* initialize the hash map here */ }

        while(end<s.size()){

            if(map[s[end++]]-- ?){  /* modify counter here */ }

            while(/* counter condition */){ 
                 
                 /* update d here if finding minimum*/

                //increase begin to make it invalid/valid again
                
                if(map[s[begin++]]++ ?){ /*modify counter here*/ }
            }  

            /* update d here if finding maximum*/
        }
        return d;
  }
---------------------------------------------------------------------------------------------------------------------------------------------------------------
