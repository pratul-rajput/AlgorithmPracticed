# Define the structure of a Node in the tree
class Node:
    def __init__(self, value):
        self.value = value   # Value of the node
        self.left = None     # Left child
        self.right = None    # Right child

# Function to print the tree (in-order traversal)
def inorder_traversal(root):
    if root:
        inorder_traversal(root.left)  # Visit left subtree
        print(root.value, end=" ")    # Visit node
        inorder_traversal(root.right) # Visit right subtree

# Example usage
if __name__ == "__main__":
    # Creating nodes
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)

    # In-order traversal of the tree
    print("Inorder Traversal of the tree:")
    inorder_traversal(root)
---------------------------------------------------------------------------------------------------------------------
// To count the number of integers divisible by a number M within a given range [L, R], 
// you can use a mathematical approach rather than iterating through all numbers, 
// which is more efficient.

// Explanation:
// Divisibility by M:
// To count the numbers divisible by M in a range [L, R], we can count 
// the multiples of M from 1 to R and subtract the multiples of M from 1 to (L − 1). 
// This gives us the number of multiples of M in the range [L, R].

// Formula:
// The number of multiples of M from 1 to R is given by floor(R / M).
// The number of multiples of M from 1 to (L − 1) is given by floor((L − 1) / M).

// Therefore, the count of numbers divisible by M in the range [L, R] is:

// count = floor(R / M) − floor((L − 1) / M)

python code
def count_numbers_divisible_by_m(L, R, M):
    # Calculate the multiples of M from 1 to R and subtract multiples from 1 to (L-1)
    return (R // M) - ((L - 1) // M)

# Example usage:
L = 10
R = 50
M = 7
result = count_numbers_divisible_by_m(L, R, M)
print(result)  # Output: 6
---------------------------------------------------------------------------------------------------------------------------------------------------------
#find all path between source and detination of undirected and connected graph
def find_all_paths(graph, start, end):
    def dfs(current, destination, visited, path):
        visited.add(current)
        path.append(current)
        
        # If the current node is the destination, store a copy of the path
        if current == destination:
            all_paths.append(list(path))  # Store a copy of the current path
        
        # Explore the neighbors
        for neighbor in graph[current]:
            if neighbor not in visited:
                dfs(neighbor, destination, visited, path)
        
        # Backtrack
        path.pop()
        visited.remove(current)

    all_paths = []
    dfs(start, end, set(), [])
    return all_paths

# Example usage:
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

start_node = 'A'
end_node = 'F'
paths = find_all_paths(graph, start_node, end_node)
print(paths)
-----------------------------------------------------------------------------------------------
very good explanation: https://strangerxxx.hateblo.jp/entry/20220201/1643705539

code: https://takeuforward.org/data-structure/next_permutation-find-next-lexicographically-greater-permutation/
from typing import List

def nextGreaterPermutation(A: List[int]) -> List[int]:
    n = len(A) # size of the array.

    # Step 1: Find the break point:
    ind = -1 # break point
    for i in range(n-2, -1, -1):
        if A[i] < A[i + 1]:
            # index i is the break point
            ind = i
            break

    # If break point does not exist:
    if ind == -1:
        # reverse the whole array:
        A.reverse()
        return A

    # Step 2: Find the next greater element
    #         and swap it with arr[ind]:
    for i in range(n - 1, ind, -1):
        if A[i] > A[ind]:
            A[i], A[ind] = A[ind], A[i]
            break

    # Step 3: reverse the right half:
    A[ind+1:] = reversed(A[ind+1:])

    return A

if __name__ == "__main__":
    A = [2, 1, 5, 4, 3, 0, 0]
    ans = nextGreaterPermutation(A)

    print("The next permutation is: [", end="")
    for it in ans:
        print(it, end=" ")
    print("]")
----------------------------------------------------------------------------------------------------------------------------------

