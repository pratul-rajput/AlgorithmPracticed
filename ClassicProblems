
Knapsack------------------------------------------------------------------------------------------
https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/
#Efficient Approach[Tabulation Approach]
# A Dynamic Programming based Python
# Program for 0-1 Knapsack problem
# Returns the maximum value that can
# be put in a knapsack of capacity W
def knapSack(W, wt, val, n):
    K = [[0 for x in range(W + 1)] for x in range(n + 1)]

    # Build table K[][] in bottom up manner
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif wt[i-1] <= w:
                K[i][w] = max(val[i-1]
                              + K[i-1][w-wt[i-1]],
                              K[i-1][w])
            else:
                K[i][w] = K[i-1][w]

    return K[n][W]


# Driver code
if __name__ == '__main__':
    profit = [60, 100, 120]
    weight = [10, 20, 30]
    W = 50
    n = len(profit)
    print(knapSack(W, weight, profit, n))

# This code is contributed by Bhavya Jain
*********************************************************
Time Complexity: O(N * W). where ‘N’ is the number of elements and ‘W’ is capacity. 
Auxiliary Space: O(N * W). The use of a 2-D array of size ‘N*W’.
*********************************************************

------------------------------------------------------------------------------------------- 
#Subset Sum Problem[DP]
Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 9
Output: True
Explanation: There is a subset (4, 5) with sum 9.
# Efficient Tabulation code
https://www.geeksforgeeks.org/subset-sum-problem-dp-25/
#SOURCE:GFG
```python
def isSubsetSum(set, n, sum):
    subset = [[False for i in range(sum + 1)] for i in range(n + 1)]

    for i in range(n + 1):
        subset[i][0] = True

    for i in range(1, sum + 1):
        subset[0][i] = False

    for i in range(1, n + 1):
        for j in range(1, sum + 1):
            if j < set[i-1]:
                subset[i][j] = subset[i-1][j]
            if j >= set[i-1]:
                subset[i][j] = subset[i-1][j] or subset[i-1][j-set[i-1]]

    return subset[n][sum]


if __name__ == '__main__':
    set = [3, 34, 4, 12, 5, 2]
    sum = 9
    n = len(set)
    if isSubsetSum(set, n, sum):
        print("Found a subset with given sum")
    else:
        print("No subset with given sum")
```
---------------------------------------------------------------------------
