print All Subarray--------------------------------------------------------------------------
def print_all_subarrays(arr):
    n = len(arr)
    for start in range(n):
        for end in range(start, n):
            # Print the subarray from index `start` to `end`
            print(arr[start:end + 1])

# Example usage
array = [1, 2, 3]
print_all_subarrays(array)
********************
output:
[1]
[1, 2]
[1, 2, 3]
[2]
[2, 3]
[3]
********************
time and space=O(n^2)
Evaluate a Prefix Expression-------------------------------------------------------------------------------
def is_operand(c):
    """
    Return True if the given character is an operand
    """
    return c.isdigit()
 
 
def evaluate(expression):
    """
    Evaluate a given expression in prefix notation.
    Asserts that the given expression is valid.
    """
    stack = []
 
    # iterate over the string in reverse order
    for c in expression[::-1]:
 
        # push operand to stack
        if is_operand(c):
            stack.append(int(c))
 
        else:
            # pop values from stack can calculate the result
            # push the result onto the stack again
            o1 = stack.pop()
            o2 = stack.pop()
 
            if c == '+':
                stack.append(o1 + o2)
 
            elif c == '-':
                stack.append(o1 - o2)
 
            elif c == '*':
                stack.append(o1 * o2)
 
            elif c == '/':
                stack.append(o1 / o2)
 
    return stack.pop()
 
 
if __name__ == "__main__":
    test_expression = "+5*46"
    print(evaluate(test_expression))
Output: 29
*************************************************
Time Complexity: O(N)

Space Complexity: O(N)
*************************************************
conversion from decimal and to decimal--------------------------------------------------------------------------------
def convert_to_decimal(number: str, base: int) -> int:
    """
    Convert a number from any base to decimal.
    
    :param number: The input number as a string.
    :param base: The base of the input number.
    :return: The decimal equivalent of the number.
    """
    decimal_value = 0
    power = 0

    # Iterate through each digit in reverse (starting from least significant digit)
    for digit in reversed(number):
        if digit.isdigit():  # For numeric digits
            value = int(digit)
        else:  # For alphabetic digits (e.g., A-F for hexadecimal)
            value = ord(digit.upper()) - ord('A') + 10
        
        # Ensure the digit is valid for the base
        if value >= base:
            raise ValueError(f"Invalid digit '{digit}' for base {base}.")
        
        decimal_value += value * (base ** power)
        power += 1

    return decimal_value


def convert_from_decimal(decimal_number: int, base: int) -> str:
    """
    Convert a decimal number to any base.
    
    :param decimal_number: The input number in decimal.
    :param base: The target base.
    :return: The equivalent number in the target base as a string.
    """
    if decimal_number == 0:
        return "0"
    
    digits = []
    while decimal_number > 0:
        remainder = decimal_number % base
        if remainder < 10:  # For numeric digits
            digits.append(str(remainder))
        else:  # For alphabetic digits (e.g., A-F for hexadecimal)
            digits.append(chr(ord('A') + remainder - 10))
        
        decimal_number //= base

    # The digits are generated in reverse order
    return ''.join(reversed(digits))


# Example Usage:
binary_number = "1010"
binary_to_decimal = convert_to_decimal(binary_number, 2)
print(f"Binary {binary_number} to Decimal: {binary_to_decimal}")

decimal_number = 10
decimal_to_binary = convert_from_decimal(decimal_number, 2)
print(f"Decimal {decimal_number} to Binary: {decimal_to_binary}")

hexadecimal_number = "1A3"
hexadecimal_to_decimal = convert_to_decimal(hexadecimal_number, 16)
print(f"Hexadecimal {hexadecimal_number} to Decimal: {hexadecimal_to_decimal}")

decimal_to_hexadecimal = convert_from_decimal(decimal_number, 16)
print(f"Decimal {decimal_number} to Hexadecimal: {decimal_to_hexadecimal}")
'''output
Binary 1010 to Decimal: 10
Decimal 10 to Binary: 1010
Hexadecimal 1A3 to Decimal: 419
Decimal 10 to Hexadecimal: A
'''
*************************************************************************************
--------------------------------------------------------------------------------
Merge-sort on LinkedList------------------------------------------------------------------------
#sorting singly linked list
# Python program for merge sort on singly linked list

class Node:
    def __init__(self, x):
        self.data = x
        self.next = None

def split(head):
    fast = head
    slow = head

    # Move fast pointer two steps and slow pointer
    # one step until fast reaches the end
    while fast and fast.next:
        fast = fast.next.next
        if fast:
            slow = slow.next

    # Split the list into two halves
    second = slow.next
    slow.next = None
    return second

def merge(first, second):
  
    # If either list is empty, return the other list
    if not first:
        return second
    if not second:
        return first

    # Pick the smaller value between first and second nodes
    if first.data < second.data:
        first.next = merge(first.next, second)
        return first
    else:
        second.next = merge(first, second.next)
        return second

def merge_sort(head):
  
    # Base case: if the list is empty or has only one node, 
    # it's already sorted
    if not head or not head.next:
        return head

    # Split the list into two halves
    second = split(head)

    # Recursively sort each half
    head = merge_sort(head)
    second = merge_sort(second)

    # Merge the two sorted halves
    return merge(head, second)

def print_list(head):
    curr = head
    while curr:
        print(curr.data, end=" ")
        curr = curr.next
    print()

if __name__ == "__main__":
    # Create a hard-coded singly linked list:
    # 9 -> 8 -> 5 -> 2
    head = Node(9)
    head.next = Node(8)
    head.next.next = Node(5)
    head.next.next.next = Node(2)

    head = merge_sort(head)
    print_list(head)
*****************************************************
Time Complexity: O(n*log(n))
Auxiliary Space: O(logn)
*****************************************************
Starting Node of a Loop in Linked List----------------------------------------------------------------
# Python3 program to return first node of loop.

class Node:
    def __init__(self, x):
        self.data = x
        self.next = None

def detectLoop(head):
  
    # Initialize two pointers, slow and fast
    slow = head
    fast = head
    
    # Traverse the list
    while fast and fast.next:
      
        # Move slow pointer by one step
        slow = slow.next
        
        # Move fast pointer by two steps
        fast = fast.next.next
        
        # Detect loop
        if slow == fast:
          
            # Move slow to head, keep
            # fast at meeting point
            slow = head
            
            # Move both one step at a time until
            # they meet
            while slow != fast:
                slow = slow.next
                fast = fast.next
                
            # Return the meeting node, which is the 
            # start of the loop
            return slow
    
    # No loop found
    return None

# Create a linked list: 10 -> 15 -> 4 -> 20
head = Node(10)
head.next = Node(15)
head.next.next = Node(4)
head.next.next.next = Node(20)

head.next.next.next.next = head

loopNode = detectLoop(head)

if loopNode:
    print(loopNode.data)
else:
    print(-1)
***************
output:10
***************
Loop Detection LinkedList--------------------------------------------------------------------------
class ListNode:
    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next

def has_cycle(head):
    slow = head  # Tortoise
    fast = head  # Hare

    while fast and fast.next:
        slow = slow.next         # Move tortoise by one step
        fast = fast.next.next    # Move hare by two steps

        if slow == fast:         # Cycle detected
            return True

    return False  # No cycle

# Example usage
# Creating a linked list with a cycle
node1 = ListNode(3)
node2 = ListNode(2)
node3 = ListNode(0)
node4 = ListNode(-4)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node2  # Creates a cycle

# Check if the linked list has a cycle
result = has_cycle(node1)
print("Has cycle:", result)  # Output: Has cycle: True

Kadane's Algorithm---------------------------------------------------------------------------

import sys

def maxSubarraySum(arr, n):
    maxi = -sys.maxsize-1 # maximum sum
    sum = 0

    for i in range(n):
        sum += arr[i]

        if sum > maxi:
            maxi = sum

        # If sum < 0: discard the sum calculated
        if sum < 0:
            sum = 0

    # To consider the sum of the empty subarray
    # uncomment the following check:

    #if maxi < 0: maxi = 0

    return maxi

arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
n = len(arr)
maxSum = maxSubarraySum(arr, n)
print("The maximum subarray sum is:", maxSum)
*****************************
output:The maximum subarray sum is: 6
time:O(n)
space:O(1)
*****************************
Middle of Linked List-------------------------------------------------------------------
                                
                     
class Node:
    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next

def find_middle(head):
    slow = fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
    return slow

# Creating a sample linked list: 
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)

# Find the middle node
middle_node = find_middle(head)

# Display the value of the middle node
print("The middle node value is:", middle_node.value)                         
Tree DFS------------------------------------------------------------------------------------
# Python3 program to for tree traversals

# A class that represents an individual node in a
# Binary Tree


class Node:
	def __init__(self, key):
		self.left = None
		self.right = None
		self.val = key


# A function to do inorder tree traversal
def printInorder(root):

	if root:

		# First recur on left child
		printInorder(root.left)

		# then print the data of node
		print(root.val),

		# now recur on right child
		printInorder(root.right)


# Driver code
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)

print "\nInorder traversal of binary tree is"
printInorder(root)
*******************************
output:
Inorder traversal of binary tree is
4
2
5
1
3
complexity:
Time Complexity: O(N)
Auxiliary Space: O(log N)
*******************************
Tree BFS----------------------------------------------------------------------------------
from collections import deque

class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def bfs(root):
    if not root:
        return []
    
    queue = deque([root])
    result = []
    
    while queue:
        node = queue.popleft()
        result.append(node.value)
        
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)
    
    return result
# Create a binary tree
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)

# Perform BFS traversal
print(bfs(root))  # Output: [1, 2, 3, 4, 5, 6, 7]

----------------------
space=time=O(n)
----------------------
reverse DLL----------------------------------------------------------------------------------------------------------------

class Node:
    def __init__(self, data, next_node=None, back_node=None):
        # Data stored in the node
        self.data = data
        # Reference to the next node
        # in the list (forward direction)
        self.next = next_node
        # Reference to the previous node
        # in the list (backward direction)
        self.back = back_node

def convert_arr_to_dll(arr):
    # Create the head node with
    # the first element of the array
    head = Node(arr[0])
    # Initialize 'prev' to the head node
    prev = head

    for i in range(1, len(arr)):
        # Create a new node with data from the
        # array and set its 'back' pointer
        # to the previous node
        temp = Node(arr[i], None, prev)
        
        # Update the 'next' pointer of the
        # previous node to point to the new node
        prev.next = temp
        # Move 'prev' to the newly created 
        # node for the next iteration
        prev = temp

    # Return the head of the doubly linked list
    return head

def print_dll(head):
    while head is not None:
        # Print the data in the current node
        print(head.data, end=" ")
        # Move to the next node
        head = head.next
    print()

def reverse_dll(head):
    # Check if the list is empty
    # or has only one node
    if head is None or head.next is None:
        # No change is needed;
        # return the current head
        return head
    
    # Initialize a pointer to
    # the previous node
    prev = None  
    
    # Initialize a pointer
    # to the current node
    current = head  

    # Traverse the linked list
    while current is not None:
        
        # Store a reference to
        # the previous node
        prev = current.back 

        # Swap the previous and next pointers
        current.back = current.next
        
         # This step reverses the links
        current.next = prev 
        
        # Move to the next node
        # in the original list
        current = current.back  

    # The final node in the original list
    # becomes the new head after reversal
    return prev.back

# Example usage:
arr = [12, 5, 6, 8, 4]
# Convert the array to a
# doubly linked list
head = convert_arr_to_dll(arr)
# Print the doubly linked list
print('Doubly Linked List Initially:  ')
print_dll(head)

print('Doubly Linked List After Reversing :')

# Reverse the doubly linked list
head = reverse_dll(head)
# Print the reversed doubly linked list
print_dll(head)
***************************************************************
Time Complexity : O(N) We only have to traverse the doubly linked list once, hence our time complexity is O(N).

Space Complexity : O(1), as the reversal is done in place.
***************************************************************
Dijkstra's Algorithm-------------------------------------------------------------------------------------------------------
import heapq

def dijkstra(graph, source):
    # Number of vertices
    n = len(graph)
    # Distance array initialized to infinity
    distances = [float('inf')] * n
    # Set the distance for the source node
    distances[source] = 0
    # Min-heap priority queue
    pq = [(0, source)]
    while pq:
        current_distance, current_node = heapq.heappop(pq)
        # Skip if we found a better way already
        if current_distance > distances[current_node]:
            continue
        # Iterate over neighboring nodes and edge weights
        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight
            # If a shorter path is found
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))
    return distances
*********************************************
T.C: O((VlogV)+(ElogV))=O((V+E)logV)=O(ElogV)
S.C:(V+E)
*********************************************
Bucket Sort-----------------------------------------------------------------------------------------------------------------
def bucket_sort(arr):
    if len(arr) == 0:
        return arr
    
    # Find the minimum and maximum values in the array
    min_value = min(arr)
    max_value = max(arr)
    
    # Range of each bucket
    bucket_count = len(arr)
    bucket_range = (max_value - min_value) / bucket_count
    
    # Create empty buckets
    buckets = [[] for _ in range(bucket_count)]
    
    # Distribute the elements into buckets
    for num in arr:
        # Calculate bucket index for each element
        index = int((num - min_value) / bucket_range)
        # Handle edge case where element equals max_value
        if index == bucket_count:
            index -= 1
        buckets[index].append(num)
    
    # Sort individual buckets and concatenate
    sorted_array = []
    for bucket in buckets:
        sorted_array.extend(sorted(bucket))
    
    return sorted_array

# Example usage
arr = [0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68]
sorted_arr = bucket_sort(arr)
print(sorted_arr)
************************************
Time Complexity
- Average Case: O(n) — Efficient when elements are uniformly distributed.
- Worst Case: O(n^2) — Happens if all elements fall into one bucket.
- Best Case: O(n) — When elements are perfectly distributed into buckets.

Space Complexity
- Space: O(n) — Requires space for the buckets and the input array.

Summary: Bucket sort works best when elements are evenly distributed and the number of buckets is proportional to the number of elements.

************************************

Reverse a Singly linked List-------------------------------------------------------------------------------------------------

#Reversing a linked list
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverse_list(head):
    prev = None  # Initially, the previous node is None
    current = head

    while current:
        next_node = current.next  # Store the next node
        current.next = prev  # Reverse the current node's pointer
        prev = current  # Move prev and current one step forward
        current = next_node

    return prev  # Prev becomes the new head of the reversed list

# Helper function to print the linked list
def print_list(head):
    while head:
        print(head.val, end=" -> ")
        head = head.next
    print("None")

# Example usage:
# Creating a linked list: 1 -> 2 -> 3 -> 4 -> 5
head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)

print("Original List:")
print_list(head)

# Reversing the linked list
reversed_head = reverse_list(head)

print("Reversed List:")
print_list(reversed_head)
`````````````````````````````
T.C=O(n)
S.C=O(1)

`````````````````````````````


DutchNationalFlagAlgorithm---------------------------------------------------------------------------------------------------
def dutch_national_flag(arr):
    low, mid, high = 0, 0, len(arr) - 1
    
    while mid <= high:
        if arr[mid] == 0:
            # Swap arr[low] and arr[mid], move both pointers
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            # Just move the mid pointer
            mid += 1
        else:  # arr[mid] == 2
            # Swap arr[mid] and arr[high], move high pointer only
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1

# Example usage:
arr = [2, 0, 1, 2, 0, 1, 1, 0]
dutch_national_flag(arr)
print(arr)
time complexity:O(n)
space complexity:O(1)
quickselect------------------------------------------------------------------------------------------------------------------
from typing import List

class Solution:

    def findKthLargest(self, nums: List[int], k: int) -> int:
        k = len(nums) - k
        left, right = 0, len(nums) - 1

        while left < right:
            pivot = self.partition(nums, left, right)

            if pivot < k:
                left = pivot + 1
            elif pivot > k:
                right = pivot - 1
            else:
                break

        return nums[k]

    def partition(self, nums: List[int], left: int, right: int) -> int:
        pivot, fill = nums[right], left

        for i in range(left, right):
            if nums[i] <= pivot:
                nums[fill], nums[i] = nums[i], nums[fill]
                fill += 1

        nums[fill], nums[right] = nums[right], nums[fill]

        return fill

# Example usage
solution = Solution()
nums = [3, 2, 1, 5, 6, 4]
k = 2
print(solution.findKthLargest(nums, k))  # Output: 5
T.C:Average case=O(n)
     Worst Case=O(n^2)
S.C: O(1)
#Binary Search--------------------------------------------------------------------------------------------------------------------
def binary_search(arr, key):
    l, r = 0, len(arr) - 1
    while l<= r:
        mid = l+(r-l) // 2
        if arr[mid] == key:
            return mid
        elif arr[mid] < key:
            l = mid + 1
        else:
            r = mid - 1
    return -1

# Example usage:
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
key = 5
print(binary_search(arr, key))  # Output: 4
-----------------------------------------------------------------------------------------------------------------------------------
def binary_search_2d(matrix, target):
    if not matrix or not matrix[0]:
        return False
    
    rows = len(matrix)
    cols = len(matrix[0])
    left, right = 0, rows * cols - 1
    
    while left <= right:
        mid = (left + right) // 2
        # Convert 1D mid index to 2D indices
        row = mid // cols
        col = mid % cols
        mid_value = matrix[row][col]
        
        if mid_value == target:
            return True
        elif mid_value < target:
            left = mid + 1
        else:
            right = mid - 1
            
    return False

# Example usage:
matrix = [
    [1, 3, 5],
    [7, 9, 11],
    [13, 15, 17]
]
target = 9
print(binary_search_2d(matrix, target))  # Output: True
T.C=O(log(m*n))
S.C=O(1)
-------------------------------------------------------------------------------------------------------------------------------
Most generalised binary search[Modified binary search to solve most binary search problem]
def binary_search(array) -> int:
    def condition(value) -> bool:
        pass

    left, right = min(search_space), max(search_space) # could be [0, n], [1, n] etc. Depends on problem
    while left < right:
        mid = left + (right - left) // 2
        if condition(mid):
            right = mid
        else:
            left = mid + 1
    return left
#bfs----------------------------------------------------------------------------------------------------------------------------
from collections import deque

def bfs(graph, start):
    visited = set()  # Initialize an empty set for visited nodes
    queue = deque([start])  # Initialize the queue with the start node
    visited.add(start)  # Mark the start node as visited
    
    while queue:
        node = queue.popleft()  # Dequeue the next node
        print(node)  # Print the current node
        
        for neighbor in graph[node]:
            if neighbor not in visited:  # Visit unvisited neighbors
                queue.append(neighbor)  # Enqueue the neighbor
                visited.add(neighbor)  # Mark neighbor as visited

# Example usage
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F', 'G'],
    'D': ['B'],
    'E': ['B', 'H'],
    'F': ['C'],
    'G': ['C'],
    'H': ['E']
}

bfs(graph, 'A')
***********************************
T.C:O(V+E)
S.C:O(V)
***********************************

# dfs-----------------------------------------------------------------------------------------------------------------------
def dfs(graph, start):
    visited = set()  # To keep track of visited nodes
    stack = [start]  # Use a list as a stack (LIFO)
    visited.add(start)
    
    while stack:
        node = stack.pop()  # Pop the last node from the stack (LIFO)
        print(node)
        
        # Push all unvisited neighbors to the stack
        for neighbor in graph[node]:
            if neighbor not in visited:
                stack.append(neighbor)
                visited.add(neighbor)
# Example usage
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F', 'G'],
    'D': ['B'],
    'E': ['B', 'H'],
    'F': ['C'],
    'G': ['C'],
    'H': ['E']
}

dfs(graph,'A')
-------------------------------------------------------------------------------------------------------------------------------------------
def dfs_recursive(graph, node, visited=None):
    if visited is None:
        visited = set()
    
    if node not in visited:
        visited.add(node)
        print(node, end=' ')
        for neighbor in graph[node]:
            dfs_recursive(graph, neighbor, visited)

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

print("Recursive DFS:")
dfs_recursive(graph, 'A')
----------------------------------------------------------------------------------------------------------------------------------------------
from collections import deque

def bfs(r, c):
    q = deque()
    visited = set()
    visited.add((r, c))
    q.append((r, c))
    
    while q:
        row, col = q.popleft()
        print(row,col)
        directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]
      
        for dr, dc in directions:
            nr, nc = row + dr, col + dc
            if nr in range(rows) and nc in range(cols) and (nr, nc) not in visited:
                q.append((nr, nc))
                visited.add((nr, nc))

# Example usage with your grid
grid = [
    ['1', '1', '0', '0', '0'],
    ['1', '1', '0', '0', '0'],
    ['0', '0', '1', '0', '0'],
    ['0', '0', '0', '1', '1']
]
rows, cols = len(grid), len(grid[0])

# Example call to bfs function
bfs(0, 0)
-------------------------------------------------------------------------------------------------------------------------------------------------
def dfs(r, c):
    stack = [(r, c)]
    visited = set()
    visited.add((r, c))
    
    while stack:
        row, col = stack.pop()
        print(row,col)
        directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]
        
        
        for dr, dc in directions:
            nr, nc = row + dr, col + dc
            if nr in range(rows) and nc in range(cols) and (nr, nc) not in visited:
                stack.append((nr, nc))
                visited.add((nr, nc))

# Example usage with your grid
grid = [
    ['1', '1', '0', '0', '0'],
    ['1', '1', '0', '0', '0'],
    ['0', '0', '1', '0', '0'],
    ['0', '0', '0', '1', '1']
]
rows, cols = len(grid), len(grid[0])

# Example call to dfs function
dfs(0, 0)
----------------------------------------------------------------------------------------------------------------------------------------------------
def dfs(r, c):
    if (
        r not in range(rows)
        or c not in range(cols)
        or (r, c) in visit
    ):
        return
    
    print(r, c)
    visit.add((r, c))
    directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]
    for dr, dc in directions:
        dfs(r + dr, c + dc)

grid = [
    ['1', '1', '0', '0', '0'],
    ['1', '1', '0', '0', '0'],
    ['0', '0', '1', '0', '0'],
    ['0', '0', '0', '1', '1']
]

visit = set()
rows, cols = len(grid), len(grid[0])

dfs(0, 0)
-------------------------------------------------------------------------------------------------------------------------------------------------------
from collections import deque

# Function to return list containing vertices in Topological order.


def topological_sort(adj, V):
	# Vector to store indegree of each vertex
	indegree = [0] * V
	for i in range(V):
		for vertex in adj[i]:
			indegree[vertex] += 1

	# Queue to store vertices with indegree 0
	q = deque()
	for i in range(V):
		if indegree[i] == 0:
			q.append(i)
	result = []
	while q:
		node = q.popleft()
		result.append(node)
		# Decrease indegree of adjacent vertices as the current node is in topological order
		for adjacent in adj[node]:
			indegree[adjacent] -= 1
			# If indegree becomes 0, push it to the queue
			if indegree[adjacent] == 0:
				q.append(adjacent)

	# Check for cycle
	if len(result) != V:
		print("Graph contains cycle!")
		return []
	return result


if __name__ == "__main__":
	n = 4 # Number of nodes

	# Edges
	edges = [[0, 1], [1, 2], [3, 1], [3, 2]]

	# Graph represented as an adjacency list
	adj = [[] for _ in range(n)]

	# Constructing adjacency list
	for edge in edges:
		adj[edge[0]].append(edge[1])

	# Performing topological sort
	print("Topological sorting of the graph:", end=" ")
	result = topological_sort(adj, n)

	# Displaying result
	for vertex in result:
		print(vertex, end=" ")

--------------------------------------------------------------------------------------------------------------

def findRedundantConnection(edges):
    par = [i for i in range(len(edges) + 1)]
    size = [1] * (len(edges) + 1)  # Using 'size' to represent the size of each set

    def find(n):
        if par[n] != n:
            par[n] = find(par[n])  # Path compression
        return par[n]

    def union(n1, n2):
        p1, p2 = find(n1), find(n2)

        if p1 == p2:
            return False  # They are already connected (cycle detected)
        
        # Union by size
        if size[p1] > size[p2]:
            par[p2] = p1
            size[p1] += size[p2]  # Update size of the new root
        else:
            par[p1] = p2
            size[p2] += size[p1]  # Update size of the new root
        return True

    # Iterate through each edge and attempt to union the nodes
    for n1, n2 in edges:
        if not union(n1, n2):  # If union fails, return the redundant edge
            return [n1, n2]

# Example usage
edges = [[1, 2], [2, 3], [3, 4], [1, 4], [1, 5]]
redundant_edge = findRedundantConnection(edges)
print("Redundant edge:", redundant_edge)


***********************************************


def dsu(edges):
    sets=set(u for edge in edges for u in edge)
    n=len(sets)
    par=[i for i in range(n)]
    rank=[1]*(n)
    
    def find(n):
        if par[n]!=n:
            par[n]=find(par[n])
        return par[n]
    def union(n1,n2):
        p1,p2=find(n1),find(n2)
        
        if p1==p2:
            return 0
        if rank[p1]>rank[p2]:
            par[p2]=p1
            rank[p1]+=rank[p2]
        else:
            par[p1]=p2
            rank[p2]+=rank[p1]
        return 1
    for n1,n2 in edges:
        if not union(n1,n2):
            print("False")
            print(n1,n2)
            
        
edges = [
    (0, 1),
    (1, 2),
    (2, 3),
    (3, 4),
    (4, 5),
    (5, 6),
    (6, 7),
    (7, 8),
    (8, 0),  # This creates a large cycle
    (2, 8)   # Additional connection that creates a connection between different components
]

dsu(edges)
--------------------------------------------------------------------------------------------------------------------------------------------------------
#Longest common subsequence[gfg]
def get_lcs_length(S1, S2):
    m = len(S1)
    n = len(S2)

    # Initializing a matrix of size (m+1)*(n+1)
    dp = [[0] * (n + 1) for x in range(m + 1)]

    # Building dp[m+1][n+1] in bottom-up fashion
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if S1[i - 1] == S2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j],
                               dp[i][j - 1])

    # dp[m][n] contains length of LCS for S1[0..m-1]
    # and S2[0..n-1]
    return dp[m][n]


if __name__ == "__main__":
    S1 = "AGGTAB"
    S2 = "GXTXAYB"
    print("Length of LCS is", get_lcs_length(S1, S2))
---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
#merge sort
# Python program for implementation of MergeSort

# Merges two subarrays of arr[].
# First subarray is arr[l..m]
# Second subarray is arr[m+1..r]


def merge(arr, l, m, r):
	n1 = m - l + 1
	n2 = r - m

	# create temp arrays
	L = [0] * (n1)
	R = [0] * (n2)

	# Copy data to temp arrays L[] and R[]
	for i in range(0, n1):
		L[i] = arr[l + i]

	for j in range(0, n2):
		R[j] = arr[m + 1 + j]

	# Merge the temp arrays back into arr[l..r]
	i = 0	 # Initial index of first subarray
	j = 0	 # Initial index of second subarray
	k = l	 # Initial index of merged subarray

	while i < n1 and j < n2:
		if L[i] <= R[j]:
			arr[k] = L[i]
			i += 1
		else:
			arr[k] = R[j]
			j += 1
		k += 1

	# Copy the remaining elements of L[], if there
	# are any
	while i < n1:
		arr[k] = L[i]
		i += 1
		k += 1

	# Copy the remaining elements of R[], if there
	# are any
	while j < n2:
		arr[k] = R[j]
		j += 1
		k += 1

# l is for left index and r is right index of the
# sub-array of arr to be sorted


def mergeSort(arr, l, r):
	if l < r:

		# Same as (l+r)//2, but avoids overflow for
		# large l and h
		m = l+(r-l)//2

		# Sort first and second halves
		mergeSort(arr, l, m)
		mergeSort(arr, m+1, r)
		merge(arr, l, m, r)


# Driver code to test above
arr = [12, 11, 13, 5, 6, 7]
n = len(arr)
print("Given array is")
for i in range(n):
	print("%d" % arr[i],end=" ")

mergeSort(arr, 0, n-1)
print("\n\nSorted array is")
for i in range(n):
	print("%d" % arr[i],end=" ")

# This code is contributed by Mohit Kumra
----------------------------------------------------------------------------------------------------
#Heap sort
# To heapify a subtree rooted at index i
def heapify(arr, n, i):
    largest = i  # Initialize largest as root
    left = 2 * i + 1  # Left child
    right = 2 * i + 2  # Right child

    # If left child is larger than root
    if left < n and arr[left] > arr[largest]:
        largest = left

    # If right child is larger than largest so far
    if right < n and arr[right] > arr[largest]:
        largest = right

    # If largest is not root
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # Swap

        # Recursively heapify the affected subtree
        heapify(arr, n, largest)

# Function to perform HeapSort
def heap_sort(arr):
    n = len(arr)

    # Build a maxheap (rearrange array)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # One by one extract elements from the heap
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # Swap
        heapify(arr, i, 0)

# Example usage:
arr = [12, 11, 13, 5, 6, 7]
heap_sort(arr)
print("Sorted array:", arr)
************************************************************************
This is in-place sorting Algorithm[means it does not require extra space]
T.C
AVerage,Worst,Best:O(nlogn)
Space Complexity:O(1)
*************************************************************************
-----------------------------------------------------------------------------------------------------------------------
#QuickSort
def quick_sort(arr):
    # Helper function to partition the array
    def partition(arr, low, high):
        pivot = arr[low]  # Choose the leftmost element as pivot
        left = low + 1
        right = high

        while True:
            # Move the left pointer to the right until an element >= pivot is found
            while left <= right and arr[left] < pivot:
                left += 1

            # Move the right pointer to the left until an element <= pivot is found
            while left <= right and arr[right] > pivot:
                right -= 1

            # If pointers crossed, the partitioning is done
            if left > right:
                break
            else:
                # Swap elements at left and right pointers
                arr[left], arr[right] = arr[right], arr[left]

        # Place the pivot element in its correct position
        arr[low], arr[right] = arr[right], arr[low]

        return right

    # Main quicksort function
    def quick_sort_recursive(arr, low, high):
        if low < high:
            # Partition the array and get the pivot index
            pi = partition(arr, low, high)

            # Recursively sort elements before and after partition
            quick_sort_recursive(arr, low, pi - 1)
            quick_sort_recursive(arr, pi + 1, high)

    # Call the recursive quicksort function
    quick_sort_recursive(arr, 0, len(arr) - 1)

# Example usage:
arr = [10, 7, 8, 9, 1, 5]
quick_sort(arr)
print("Sorted array:", arr)

------------------------------------------------------------------------------------------------------------------------------------------------
def adjacency_list_dictionary(V, edges):
   
    
    adjacency_list = {}

    # Add vertices to the dictionary
    for i in range(V):
        adjacency_list[i] = []

    # Add edges to the dictionary
    for edge in edges:
        vertex1, vertex2 = edge
        adjacency_list[vertex1].append(vertex2)

    # Display the adjacency list
    for vertex, neighbors in adjacency_list.items():
        print(f"{vertex} -> {' '.join(map(str, neighbors))}")


# testcase 1
V1 = 3
edges1 = [[0, 1], [1, 2], [2, 0]]
adjacency_list_dictionary(V1, edges1)

# testcase 2
V2 = 4
edges2 = [[0, 1], [1, 2], [1, 3], [2, 3], [3, 0]]
adjacency_list_dictionary(V2, edges2)
-------------------Alternate---------------
#Alternate
n = 3  # Number of vertices
m = 3  # Number of edges

# Initialize the adjacency list for the graph
g = [[] for _ in range(n + 1)]

# Manually add the edges (1, 2), (1, 3), (2, 3)
edges = [(1, 2), (1, 3), (2, 3)]

# Construct adjacency list from hardcoded edges
for a, b in edges:
    g[a].append(b)
    g[b].append(a)

print(g)

------------------------------------------------------------------------------------------------------------------------
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        
        # Move elements of arr[0..i-1] that are greater than key
        # to one position ahead of their current position
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        
        arr[j + 1] = key  # Place the key in its correct position

# Example usage:
arr = [12, 11, 13, 5, 6]
insertion_sort(arr)
print("Sorted array:", arr)
-------------------------------------------------------------------------------------------------------
def bubble_sort(arr):
    n = len(arr)
    # Traverse through all array elements
    for i in range(n):
        # Last i elements are already in place
        swapped = False
        for j in range(0, n - i - 1):
            # Swap if the element found is greater than the next element
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True
        # If no elements were swapped, break the loop as the array is sorted
        if not swapped:
            break

# Example usage:
arr = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(arr)
print("Sorted array:", arr)
Selection sort------------------------------------------------------------------------------------------------------------
def selection_sort(arr):
    n = len(arr)
    for i in range(n - 1):
        # Assume the first element of the unsorted part is the smallest
        min_index = i
        # Find the smallest element in the unsorted part
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        # Swap the found minimum element with the first element of the unsorted part
        arr[i], arr[min_index] = arr[min_index], arr[i]

# Example usage
arr = [64, 25, 12, 22, 11]
selection_sort(arr)
print("Sorted array:", arr)
****************************************
time complexity: best=worst=average=O(n^2)
space complexity: O(1)
stability:Not Stable[If two elements are equal, their relative order may not be preserved after sorting.]
****************************************
Shell sort-----------------------------------------------------------------------------------------------------------------
# Shell Sort is an optimization of Insertion Sort.
def shell_sort(arr):
    n = len(arr)
    # Start with a large gap, then reduce the gap
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            # Perform a gapped insertion sort
            temp = arr[i]
            j = i
            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        # Reduce the gap for the next iteration
        gap //= 2

# Example usage
arr = [12, 34, 54, 2, 3]
shell_sort(arr)
print("Sorted array:", arr)
****************************************************
Time Complexity:
Best:O(nlogn)
Worst Case:O(n^2)
Average Case:O(n^(3/2)
Space Complexity: O(1)
Stability: Not Stable 
